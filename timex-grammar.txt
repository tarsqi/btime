timex -> present { Deictic() } 
    | anaphoric { Anaphoric() }
    | indef_past { IndefPast() }
	| indef_future { IndefFuture() }
	| indef_duration { Duration() }
	| coerced_timepoint
    | timepoint
    | interval
    | quant
    | freq
    | wsj_expression
    | adjectival_timex
    | generic_plural
    | do_not_parse
    
timepoint -> date
    | time
    | day_of_week
    | year
    | month
    | month_and_day
    | year_and_week
    | quarter
    | anchored_timepoint
    | coerced_timepoint
    | increment_or_decrement
    | next_or_last_instance
    | date time { _[0] | _[1] }
    | month year { _[1] | _[0] } 
    | indef_timepoint { IndefTimePoint() }
    | mod_timepoint

present -> "now"
    | "right" "now"
    | "this" "time"
    | "current" "time"
    | "currently"
    | "current"
    | "the" "current" "time"
    | "present"
    | "presently"
    | "present" "time"
    | "the" "present" "time"
    
anaphoric -> "then"
    | "meanwhile"
    | "that" "time"
    
increment_or_decrement -> last_deictic "week" { Decrement(Week)(Deictic()) }
    | last_deictic "month" { Decrement(Month)(Deictic()) }
    | last_deictic "year" { Decrement(Year)(Deictic()) }
    | next_deictic "week" { Increment(Week)(Deictic()) }
    | next_deictic "month" { Increment(Month)(Deictic()) }
    | next_deictic "year" { Increment(Year)(Deictic()) }
    | last_anaphoric "week" { Decrement(Week)(Anaphoric()) }
    | last_anaphoric "month" { Decrement(Month)(Anaphoric()) }
    | last_anaphoric "year" { Decrement(Year)(Anaphoric()) }
    | next_anaphoric "week" { Increment(Week)(Anaphoric()) }
    | next_anaphoric "month" { Increment(Month)(Anaphoric()) }
    | next_anaphoric "year" { Increment(Year)(Anaphoric()) }
    | "yesterday" { Decrement(Day)(Deictic()) }
    | "tomorrow" { Increment(Day)(Deictic()) }
    
next_or_last_instance -> last_deictic timepoint { LastInstance(_[1])(Deictic()) }
    | next_deictic timepoint { NextInstance(_[1])(Deictic()) }

coerced_timepoint -> "today" { CoercedTimePoint(Deictic(), Day) }
    | "this" bare_unit { CoercedTimePoint(Deictic(), _[1]) }
    | "the" "current" bare_unit { CoercedTimePoint(Deictic(), _[2]) }
    | "this" month { CoercedTimePoint(Deictic(), _[1]) }
    | "this" day_of_week { CoercedTimePoint(Deictic(), _[1]) }

last_deictic -> "last"

next_deictic -> "next" | "this" "coming"

last_anaphoric -> "the" "latest" | "the" "most" "recent" | "the" "earlier"

next_anaphoric -> "the" "following" | "the" "coming"

time -> named_hour { Time(_[0]) }
    | hour ":" minute { Time(_[0], _[2]) }
    | minute r"past|after" hour { Time(_[2], _[0]) }
    | small_num r"a\.m\." { Time(_[0]) }
    | small_num r"a\.m" "." { Time(_[0]) }
    | small_num "in" "the" "morning" { Time(_[0]) }
    | small_num r"p\.m\." { Time(int(_[0]) + 12) }
    | small_num r"p\.m" "." { Time(int(_[0]) + 12) }
    | small_num "in" "the" r"evening|afternoon" { Time(int(_[0]) + 12) }
    | HHMMSSToken() { hhmmss_to_time(_[0]) }
    | HHMMToken() { hhmm_to_time(_[0]) }
    
hour -> named_hour
    | small { Hour(_[0]) }

named_hour -> small r"o'?clock" { Hour(_[0]) }
    | "noon" { Hour(12) }
    | "midnight" { Hour(0) }

minute -> small { Minute(_[0]) }
    | "quarter" { Minute(15) }
    | "half" { Minute(30) }

date -> day month year { CalendarDate(_[2], _[1], _[0]) }
    | month day year { CalendarDate(_[2], _[0], _[1]) }
    | day month "," year { CalendarDate(_[3], _[1], _[0]) }
    | month "." day "," year { CalendarDate(_[4], _[0], _[2]) }
    | month day "," year { CalendarDate(_[3], _[0], _[1]) }
    | MMDDYYyyToken() { mmddyyyy_to_date(_[0]) }
    | r"^(19|20)\d{6}$" { yyyymmdd_to_date(_[0]) }
    | r"^\d{6}$" { yymmdd_to_date(_[0]) }

day -> small { DayOfMonth(_[0]) }
    | DayOfMonthToken() { DayOfMonth(_[0]) }

month -> Abbrev("january", 3) { Month(1) }
    | Abbrev("february", 3) { Month(2) }
    | Exact("March") { Month(3) }
	| Exact("Mar") "." { Month(3) }
    | Abbrev("april", 3) { Month(4) }
    | Exact("May") { Month(5) }
    | Abbrev("june", 3) { Month(6) }
    | Abbrev("july", 3) { Month(7) }
    | Abbrev("august", 3) { Month(8) }
    | Abbrev("september", 3) { Month(9) }
    | Abbrev("october", 3) { Month(10) }
    | Abbrev("november", 3) { Month(11) }
    | Abbrev("december", 3) { Month(12) }
    
quarter -> ordinal "quarter" { Quarter(_[0]) } 
    | "the" ordinal "quarter" { Quarter(_[1]) } 
    | ordinal "-" "quarter" { Quarter(_[0]) }

month_and_day -> month day { Month(_[0]) | DayOfMonth(_[1]) }
    | month "." day { Month(_[0]) | DayOfMonth(_[2]) }
    | month ordinal { Month(_[0]) | DayOfMonth(_[1]) }
    | day "of" month { Month(_[2]) | DayOfMonth(_[0])  }
    | ordinal "of" month { Month(_[2]) | DayOfMonth(_[0]) }
    | "the" ordinal "of" month { Month(_[3]) | DayOfMonth(_[1]) }
    | MMDDToken() { mmdd_to_date(_[0]) }
    
year -> GreaterThan(1799) { Year(_[0]) }
    | r"^(18|19|20)\d{2}$" { Year(_[0]) }
    | "the" "year" number { Year(_[2]) }
    | teen small_num { Year((_[0] * 100) + _[1]) }
    | teen "and" small_num { Year((_[0] * 100) + _[2]) }
    | "two" "thousand" { Year(2000) }
    | "two" "thousand" small_num { Year(2000 + _[2]) }
    | "two" "thousand" "and" small_num { Year(2000 + _[3]) }

year_and_week -> ordinal "week" "of" year { Year(_[3]) | Week(_[0]) }
    | "the" ordinal "week" "of" year { Year(_[4]) | Week(_[1]) }
    
year_and_day -> ordinal "day" "of" year { Year(_[3]) | Day(_[0]) }
    | "the" ordinal "day" "of" year { Year(_[4]) | Day(_[1]) }

day_of_week -> Abbrev("monday", 3) { DayOfWeek(1) }
    | Abbrev("tuesday", 3) { DayOfWeek(2) }
    | Abbrev("wednesday", 3) { DayOfWeek(3) }
    | Abbrev("thursday", 3) { DayOfWeek(4) }
    | Abbrev("friday", 3) { DayOfWeek(5) }
    | Abbrev("saturday", 3) { DayOfWeek(6) }
    | Abbrev("sunday", 3) { DayOfWeek(7) }

interval -> anchored_interval | duration

anchored_interval -> "the" "past" duration { PastAnchoredInterval(_[2]) }
    | "the" "last" duration { PastAnchoredInterval(_[2]) }
    | "the" "next" duration { FutureAnchoredInterval(_[2]) }
    | "the" "coming" duration { FutureAnchoredInterval(_[2]) }
    
anchored_timepoint -> duration "ago" { PastAnchoredTimePoint(_[0])(Deictic()) }
    | duration "earlier" { PastAnchoredTimePoint(_[0])(Anaphoric()) }
    | duration "afterwards" { FutureAnchoredTimePoint(_[0])(Anaphoric()) }
    | duration "later" { FutureAnchoredTimePoint(_[0]) }

duration -> period { Duration() | _[0] }
    | bare_unit { Duration() | _[0](1) }
    | duration period { _[0] | _[1] }
    | duration "and" period { _[0] | _[2] }
    | duration "period" { _[0] }
    | the_any duration { _[1] }
    | generic_plural
    | mod_duration

period -> number r"seconds?" { Seconds(_[0]) }
    | number r"minutes?" { Minutes(_[0]) }
    | "a" "minute" "and" "a" "half" { Minutes(1) | Seconds(30) }
    | number "and" fraction r"minutes?" { Minutes(_[0]) | Seconds(60*_[2]) }
    | number r"hours?" { Hours(_[0]) }
    | number "and" fraction r"hours?" { Hours(_[0]) | Minutes(60*_[2]) }
    | "an" "hour" "and" "a" "half" { Hours(1) | Minutes(30) }
    | number r"days?" { Days(_[0]) }
    | number "and" fraction r"days?" { Days(_[0]) | Hours(12*_[2]) }
    | "a" "day" "and" "a" "half" { Days(1) | Hours(12) }
    | number r"weeks?" { Weeks(_[0]) }
    | "a" "week" "and" "a" "half" { Weeks(1) | Days(3) | Hours(12) }
    | number r"months?" { Months(_[0]) }
    | "a" "month" "and" "a" "half" { Months(1) | Days(15) }
    | number r"quarters?" { Quarters(_[0]) }
    | number r"years?" { Years(_[0]) }
    | "a" "year" "and" "a" "half" { Years(1) | Months(6) }
    | number "and" fraction r"years?" { Years(_[0]) | Months(12*_[2]) }
    
bare_unit -> "second" { Seconds }
    | "minute" { Minutes }
    | "hour" { Hours }
    | "day" { Days }
    | "week" { Weeks }
    | "month" { Months }
    | "quarter" { Quarters }
    | "year" { Years }

plural_unit -> "seconds" { Seconds }
    | "minutes" { Minutes }
    | "hours" { Hours }
    | "days" { Days }
    | "weeks" { Weeks }
    | "months" { Months }
    | "quarters" { Quarters }
    | "years" { Years }
    
number -> r"[0-9]+$" { int(_[0]) }
    | cardinal
    | number "and" fraction { _[0] + _[2] }

strictly_cardinal -> zero | small_num | hundreds | thousands
cardinal -> zero | small | hundreds | thousands
zero -> "0" { 0 }
    | r"(zero|oh?|n?[ao]ught)$" { 0 }
small_num -> r"[0-9]{1,2}$" { int(_[0]) }
    | ones
    | zero ones { _[1] }
    | teen
    | tens
    | tens ones { _[0] + _[1] }
    | tens "-" ones { _[0] + _[2] }
small -> small_num
    | r"^an?$" { 1 }
ones -> "one" { 1 }
    | "two" { 2 }
    | "three" { 3 }
    | "four" { 4}
    | "five" { 5 }
    | "six" { 6 }
    | "seven" { 7 }
    | "eight" { 8 }
    | "nine" { 9 }
teen -> "ten" { 10 }
    | "eleven" { 11 }
    | "twelve" { 12 }
    | "thirteen" { 13 }
    | "fourteen" { 14 }
    | "fifteen" { 15 }
    | "sixteen" { 16 }
    | "seventeen" { 17 }
    | "eighteen" { 18 }
    | "nineteen" { 19 }
tens -> "twenty" { 20 }
    | "thirty" { 30 }
    | "forty" { 40 }
    | "fifty" { 50 }
    | "sixty" { 60 }
    | "seventy" { 70 }
    | "eighty" { 80 }
    | "ninety" { 90 }
hundreds -> small_num "hundred" { _[0] * 100 }
    | small_num "hundred" small_num { (_[0] * 100) + _[2] }
    | small_num "hundred" "and" small_num { (_[0] * 100) + _[3] }
thousands -> small_num small_num { _[0] * 100 + _[1] }
    | small_num "thousand" { _[0] * 1000 }
    | small_num "thousand" small_num { (_[0] * 1000) + _[2] }
    | small_num "thousand" "and" small_num { (_[0] * 1000) + _[3] }
    | small_num "thousand" hundreds { (_[0] * 1000) + _[2] }
    | hundreds "thousand" { _[0] * 1000 }
    | hundreds "thousand" small_num { (_[0] * 1000) + _[2] }
    | hundreds "thousand" "and" small_num { (_[0] * 1000) + _[3] }
    | hundreds "thousand" hundreds { (_[0] * 1000) + _[2] }
    | teen small_num { (_[0] * 100) + _[1] }
    | teen "and" small_num { (_[0] * 100) + _[2] }

ordinal -> ord_ones | ord_small 
ord_small -> r"[0-9]+(st|nd|rd|th)" { int(_[0][:-2]) }
    | ord_ones
    | ord_teen
    | ord_tens
    | tens ord_ones { _[0] + _[1] }
ord_ones -> "first" { 1 }
    | "second" { 2 }
    | "third" { 3 }
    | "fourth" { 4 }
    | "fifth" { 5 }
    | "sixth" { 6 }
    | "seventh" { 7 }
    | "eighth" { 8 }
    | "ninth" { 9 }
ord_teen -> "tenth" { 10 }
    | "eleventh" { 11 }
    | "twelfth" { 12 }
    | "thirteenth" { 13 }
    | "fourteenth" { 14 }
    | "fifteenth" { 15 }
    | "sixteenth" { 16 }
    | "seventeenth" { 17 }
    | "eighteenth" { 18 }
    | "nineteenth" { 19 }
ord_tens -> "twentieth" { 20 }
    | "thirtieth" { 30 }
    | "fortieth" { 40 }
    | "fiftieth" { 50 }
    | "sixtieth" { 60 }
    | "seventieth" { 70 }
    | "eightieth" { 80 }
    | "ninetieth" { 90 }

mod_duration -> approx duration { Mod("APPROX", _[1]) }
    | duration "or" "so" { Mod("APPROX", _[0]) }
    | equal_or_less duration { Mod("EQUAL_OR_LESS", _[1]) } 
    | duration "or" "less" { Mod("EQUAL_OR_LESS", _[0]) } 
    | equal_or_more duration { Mod("EQUAL_OR_MORE", _[1]) } 
    | duration "or" "more" { Mod("EQUAL_OR_MORE", _[0]) } 
    | less_than duration { Mod("LESS_THAN", _[1]) }
    | more_than duration { Mod("MORE_THAN", _[1]) }
    
mod_timepoint -> start timepoint { Mod("START", _[1]) }
    | end timepoint { Mod("END", _[1]) }
    | mid timepoint { Mod("MID", _[1]) }
    | timepoint on_or_before { Mod("ON_OR_BEFORE", _[0]) }
    | timepoint on_or_after { Mod("ON_OR_AFTER", _[0]) }

approx -> "about"
    | "around"

equal_or_less -> "nearly"
    | "within"
    | "approaching"
    | "at" "most"
    | "up" "to"
    | "no" "more" "than"
    | "as" "much" "as"

equal_or_more -> "at" "least"
    | "no" "less" "than"
    | "as" "little" "as"

less_than -> "less" "than" 
    | "almost"

more_than -> "more" "than"
    | "over"

end -> "late"
    | "later"
    | "the" "late"
    | "the" "end" "of"
   
start -> "early"
    | "earlier"
    | "the" "early"
    | "the" "start" "of"
    | "the" "beginning" "of"
    
mid -> "mid"
    | "mid" "-"
    | "middle" "of"
    | dt_any mid

on_or_before -> "or" "earlier"
    | "or" "sooner"
    
on_or_after -> "or" "later"

quant -> "each" "of" interval { Quant(_[0], _[2]) } 
    | quantifier interval { Quant(_[0], _[1]) }
    | quantifier Any() interval { Quant(_[0], _[2]) }
    | quantifier timepoint { Quant(_[0], _[1]) }
    | quantifier Any() timepoint { Quant(_[0], _[2]) }

quantifier -> "each" { _[0] }
    | "every" { _[0] }

freq -> frequency duration { Freq(_[0], _[1]) }
    | frequency "per" duration { Freq(_[0], _[2]) }
    | frequency quant { Freq(_[0], _[1]) }

frequency -> "once" { 1 }
    | "twice" { 2 }
    | "thrice" { 3 }
    | number "times" { _[0] }    

fraction -> "quarter" { Decimal("0.25") }
    | "half" { Decimal("0.5") }
    | "third" { 1/Decimal("3") }
    | "two" "thirds" { 2/Decimal("3") }
    | "three" "quarters" { Decimal("0.75") }
    | "a" fraction { _[1] }
    
indef_past -> "recent"
    | adv "recent"
    | "recently"
    | adv "recently"
    | "previous"
    | "previously"
    | "former"
    | "formerly"
    | "earlier"
    | "earlier" generic_plural
    | "recent" generic_plural
    | "previous" generic_plural
    | "past" generic_plural
    | dt_any "while" "ago"
    | dt_any "time" "ago"
    | dt_any "past"
    | "past"
    | "last" "time"
    | "the" "last" "time"
    | "the" "last" generic_plural
    | "the" "next" generic_plural
    | "coming" generic_plural
    | "the" "coming" generic_plural

indef_future -> "soon"
    | dt_any "future"
    | "next" "time"
    | dt "next" "time"
    | "later"
    | "later" generic_plural
    | "coming" generic_plural
    | "the" "coming" generic_plural
    | adv "later"
    | "a" "later" "time"
    | "a" "later" "date"
    | r"an?" adv "later" "time"
    | r"an?" adv "later" "date"
    
indef_duration -> dt "time"
    | "a" "while"
    | dt_any "while"
    | dt_any "period"
    | dem_any "period"
    
indef_timepoint -> demonstr r"times?"
    | dt_any r"moments?"
    | dem_any r"moments?"
    
wsj_expression -> unit_ago "period" { PastAnchoredTimePoint(Duration() | _[0](1))(Deictic()) }
    | unit_earlier "period" { PastAnchoredTimePoint(Duration() | _[0](1))(Anaphoric()) }
    | unit_ago bare_unit { CoercedTimePoint(PastAnchoredTimePoint(Duration() | _[0](1))(Deictic()), _[1]) }
    | unit_earlier bare_unit { CoercedTimePoint(PastAnchoredTimePoint(Duration() | _[0](1))(Anaphoric()), _[1]) }
    | dt_any wsj_expression { _[1] }
    | dem_any wsj_expression { _[1] }
    | unit_ago { PastAnchoredTimePoint(Duration() | _[0](1))(Deictic()) }
    | unit_earlier { PastAnchoredTimePoint(Duration() | _[0](1))(Anaphoric()) }
    
unit_ago -> bare_unit "ago" { _[0] }
    | bare_unit "-" "ago" { _[0] }
unit_earlier -> bare_unit "earlier" { _[0] }
    | bare_unit "-" "earlier" { _[0] }
    
adjectival_timex -> small_num "-" bare_unit { Duration() | _[2](_[0]) }
    | adjectival_timex "-" "old" { _[0] }
    
generic_plural -> "seconds" { GenericPlural(Seconds) }
    | "minutes" { GenericPlural(Minutes) }
    | "hours" { GenericPlural(Hours) }
    | "days" { GenericPlural(Days) }
    | "weeks" { GenericPlural(Weeks) }
    | "months" { GenericPlural(Months) }
    | "years" { GenericPlural(Years) }
    | some plural_unit { GenericPlural(_[1]) }
    | dt plural_unit { GenericPlural(_[1]) }
    | cardinal "to" cardinal plural_unit { GenericPlural(_[3]) }
    | plural_unit "or" plural_unit { Duration() }
    | plural_unit "and" plural_unit { Duration() }
    | "a" bare_unit "or" "two" { Duration() }
    
do_not_parse -> small_num "years" "old" { DoNotParse(map(str, _)) }
    
adj_phrase -> adj
    | adj_phrase adj
    | adj adj_phrase
    | adv adj

some -> "some"
    | "few"
    | "a" "few"
    | "a" "couple"
    | "a" "couple" "of"
    | "couple" "of"
    | "several"

adj -> "/jj"

adv -> "/rb"
    | "very"
    | "most"
    | "least"
    | "more"
    | "less"
    | r".*ly$"
    
dt -> "/dt"
    | "a"
    | "an"
    | "the"
    
demonstr -> "this" | "that" | "these" | "those"

dem_any -> demonstr | demonstr Any() | demonstr adv Any()

dt_any -> dt | dt Any() | dt adv Any()

the_any -> "the" | "the" Any() | "the" adv Any()

modal -> "/md"